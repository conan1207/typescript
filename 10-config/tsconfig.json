{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // "incremental": true,                   /* 컴파일이 될 떄 마다 수정된 사항 없으면 수정된 것만 컴파일. 대신 컴퓨터 메모리 차지할 수 있음. Enable incremental compilation */
    "target": "es5",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
    "module": "commonjs",                     /* 모듈 정보 어떻게? common.js 는 노드 각 컴파일되는 모습 다름. Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    // "lib": [],                             /* 라이브러리 결정 Specify library files to be included in the compilation. */
    // "allowJs": true,                       /* 프로젝트에 js, ts 혼용해서 사용할 건지 Allow javascript files to be compiled. */
    // "checkJs": true,                       /* js 파일에 오류 있으면 뜨게 할 건지 Report errors in .js files. */
    // "jsx": "preserve",                     /* 리액트에 관련된 거 사용할 건지 Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* 내가 작성한 코드를 라이브러리로 제공할 거라면 true. Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* 디버깅 시에 Generates a sourcemap for each corresponding '.d.ts' file. */
 "sourceMap": true,                     /* 디버깅... Generates corresponding '.map' file. */
    // "outFile": "./",                       /* 다수의 ts파일을 하나의 js로  Concatenate and emit output to single file. */
     "outDir": "./build",                     /* 어디에 변환한 js파일 둘 거야? Redirect output structure to the directory. */
     "rootDir": "./src",                      /* ts파일은 꼭! src 아래에만 생성 Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                     /* 이전에 빌드한 정보를 기억하고 있어서 빠르게 빌드 Enable project compilation */
    // "tsBuildInfoFile": "./",               /* incremental이 트루면 관련된 정보를 담을 수 있는 파일을 지정 Specify file to store incremental compilation information */
    // "removeComments": true,                /* Do not emit comments to output. */
    // "noEmit": true,                        /* 컴파일 에러 체크만. js로 변환 시켜주지 않음. Do not emit outputs. */
    // "importHelpers": true,                 /* 예전 js로 변환 시 안전하게 하기 위해.. Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* 각각의 파일을 다른 모듈로 변환 Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true,                           /* 밑에 것들은 stric false일 시... 설정 Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
    // "noUncheckedIndexedAccess": true,      /* Include 'undefined' in index signature results */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "skipLibCheck": true,                     /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true  /* Disallow inconsistently-cased references to the same file. */
  },
  // 컴파일에서 제외하고 싶은 ts가 있다면?
  // 반대는 include
  "exclude": ["./src/dev.ts"]
}
